### schema type definitions
type $Module$ {
  id: Int!
  name: String!
}
### end schema type definitions

type $Module$s {
  pageInfo: PageInfo
  edges: [$Module$]
}

type $Module$Data {
  node: $Module$
}

type $Module$Payload {
  node: $Module$
  errors: [FieldError!]
}

input $Module$FilterInput {
  searchText: String
}

input $Module$CreateInput {
  name: String!
}

input $Module$UpdateInput {
  name: String!
}

input $Module$WhereUniqueInput {
  id: Int
}

extend type Query {
  $module$s(limit: Int, offset: Int, orderBy: OrderByInput, filter: $Module$FilterInput): $Module$s
  $module$(where: $Module$WhereUniqueInput!): $Module$Data
}

extend type Mutation {
  create$Module$(data: $Module$CreateInput!): $Module$Payload!
  update$Module$(data: $Module$UpdateInput!, where: $Module$WhereUniqueInput!): $Module$Payload!
  delete$Module$(where: $Module$WhereUniqueInput!): $Module$Payload!
  sort$Module$s(data: [Int!]): BatchManyPayload!
  deleteMany$Module$s(ids: [Int!]): BatchManyPayload!
}
